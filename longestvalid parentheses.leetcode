//using stack
class Solution {
public:
stack<int> st;
    int longestValidParentheses( string s) {
        st.push(-1);
    int max_length = 0;
    for (int i = 0; i < s.length(); ++i) {
        if (s[i] == '(') {
          st.push(i);
        } else {
           st.pop(); 
            if (!st.empty()) {
              max_length = max(max_length, i - st.top());
            } else {
                st.push(i);
            }
        }
    }

    return max_length;
    }
};
                             or
//without using stack
class Solution {
public:
    int longestValidParentheses(string s) {
        int max_length = 0;
        int open  = 0, close = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s[i] == '(') {
                ++open;
            } else {
                ++close;
            }

            if (open == close) {
                max_length = max(max_length, open+ close);
            } else if (close > open) {
                open = close = 0;
            }
        }
        open = close = 0;
        for (int i = s.length() - 1; i >= 0; --i) {
            if (s[i] == '(') {
                ++open;
            } else {
                ++close;
            }

            if (open == close) {
                max_length = max(max_length, open+close);
            } else if (open > close) {
                open = close = 0;
            }
        }

        return max_length;
    }
};
